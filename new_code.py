import tensorflow as tf
import numpy as np
from tensorflow.contrib import rnn

vocab_ = {'\xa0': 60, 'S': 26, 'W': 30, 'É': 62, 'Á': 61, 'ò': 75, 'ê': 71, 'õ': 77, 'ñ': 74, 'J': 17, 'o': 48, ',': 3, "'": 2, 'g': 40, 'Q': 24, 'ż': 87, 'B': 9, 'ç': 68, 'O': 22, 'N': 21, 'D': 11, 'd': 37, 'x': 57, 'q': 50, 'L': 19, 'z': 59, 'U': 28, 'F': 13, 'w': 56, 't': 53, 'h': 41, 'j': 43, '1': 6, 'r': 51, 'e': 38, 'K': 18, 'k': 44, 'ú': 80, 'a': 34, 'ü': 81, 'é': 70, 'I': 16, 'Y': 32, 'ì': 72, 'ó': 76, 'A': 8, 'c': 36, 'E': 12, 'i': 42, 'G': 14, 'à': 64, 'y': 58, 'V': 29, 'C': 10, 'X': 31, 'ä': 67, '0': 0, 'b': 35, 's': 52, '/': 5, 'n': 47, 'p': 49, 'ö': 78, 'ą': 82, ' ': 1, 'Ż': 86, 'l': 45, 'á': 65, 'ù': 79, ':': 7, 'u': 54, 'Z': 33, 'è': 69, 'Ś': 85, 'm': 46, '-': 4, 'ł': 83, 'T': 27, 'P': 23, 'ń': 84, 'R': 25, 'í': 73, 'ã': 66, 'ß': 63, 'v': 55, 'M': 20, 'H': 15, 'f': 39}


data_pad=[[18, 41, 48, 54, 51, 58, 0, 0],[18, 41, 48, 54, 51, 58, 0, 0], [21, 34, 41, 34, 52, 0, 0, 0], [11, 34, 41, 38, 51, 0, 0, 0], [14, 38, 51, 40, 38, 52, 0, 0], [21, 34, 59, 34, 51, 42, 0, 0], [20, 34, 34, 45, 48, 54, 39, 0], [14, 38, 51, 40, 38, 52, 0, 0], [21, 34, 42, 39, 38, 41, 0, 0], [14, 54, 42, 51, 40, 54, 42, 52], [9, 34, 35, 34, 0, 0, 0, 0], [26, 34, 35, 35, 34, 40, 41, 0], [8, 53, 53, 42, 34, 0, 0, 0], [27, 34, 41, 34, 47, 0, 0, 0], [15, 34, 37, 37, 34, 37, 0, 0], [8, 52, 56, 34, 37, 0, 0, 0], [21, 34, 43, 43, 34, 51, 0, 0], [11, 34, 40, 41, 38, 51, 0, 0], [20, 34, 45, 48, 48, 39, 0, 0], [16, 52, 34, 0, 0, 0, 0, 0], [8, 52, 40, 41, 34, 51, 0, 0], [21, 34, 37, 38, 51, 0, 0, 0], [14, 34, 35, 38, 51, 0, 0, 0], [8, 35, 35, 48, 54, 37, 0, 0], [20, 34, 34, 45, 48, 54, 39, 0], [33, 48, 40, 35, 58, 0, 0, 0], [26, 51, 48, 54, 51, 0, 0, 0], [9, 34, 41, 34, 51, 0, 0, 0], [20, 54, 52, 53, 34, 39, 34, 0], [15, 34, 47, 34, 47, 42, 34, 0], [11, 34, 41, 38, 51, 0, 0, 0], [27, 54, 46, 34, 0, 0, 0, 0], [21, 34, 41, 34, 52, 0, 0, 0], [26, 34, 45, 42, 35, 34, 0, 0], [26, 41, 34, 46, 48, 48, 47, 0], [15, 34, 47, 37, 34, 45, 0, 0], [9, 34, 35, 34, 0, 0, 0, 0], [8, 46, 34, 51, 42, 0, 0, 0], [9, 34, 41, 34, 51, 0, 0, 0], [8, 53, 42, 58, 38, 41, 0, 0], [26, 34, 42, 37, 0, 0, 0, 0], [18, 41, 48, 54, 51, 42, 0, 0], [27, 34, 41, 34, 47, 0, 0, 0], [9, 34, 35, 34, 0, 0, 0, 0], [20, 54, 52, 53, 34, 39, 34, 0], [14, 54, 42, 51, 40, 54, 42, 52], [26, 45, 38, 42, 46, 34, 47, 0], [26, 38, 42, 39, 0, 0, 0, 0], [11, 34, 40, 41, 38, 51, 0, 0], [9, 34, 41, 34, 51, 0, 0, 0], [14, 34, 35, 38, 51, 0, 0, 0], [15, 34, 51, 35, 0, 0, 0, 0], [26, 38, 42, 39, 0, 0, 0, 0], [8, 52, 44, 38, 51, 0, 0, 0], [21, 34, 37, 38, 51, 0, 0, 0], [8, 47, 53, 34, 51, 0, 0, 0], [8, 56, 34, 37, 0, 0, 0, 0], [26, 51, 48, 54, 51, 0, 0, 0], [26, 41, 34, 37, 42, 37, 0, 0], [15, 34, 43, 43, 34, 51, 0, 0], [15, 34, 47, 34, 47, 42, 34, 0], [18, 34, 45, 35, 0, 0, 0, 0], [26, 41, 34, 37, 42, 37, 0, 0], [9, 34, 59, 59, 42, 0, 0, 0], [20, 54, 52, 53, 34, 39, 34, 0], [20, 34, 52, 42, 41, 0, 0, 0], [14, 41, 34, 47, 38, 46, 0, 0], [15, 34, 37, 37, 34, 37, 0, 0], [16, 52, 34, 0, 0, 0, 0, 0], [8, 47, 53, 48, 54, 47, 0, 0], [26, 34, 51, 51, 34, 39, 0, 0], [26, 45, 38, 42, 46, 34, 47, 0], [11, 34, 40, 41, 38, 51, 0, 0], [21, 34, 43, 43, 34, 51, 0, 0], [20, 34, 45, 48, 54, 39, 0, 0], [21, 34, 41, 34, 52, 0, 0, 0], [21, 34, 52, 38, 51, 0, 0, 0], [26, 34, 45, 42, 35, 34, 0, 0], [26, 41, 34, 46, 48, 47, 0, 0], [20, 34, 45, 48, 54, 39, 0, 0], [18, 34, 45, 35, 0, 0, 0, 0], [11, 34, 41, 38, 51, 0, 0, 0], [20, 34, 34, 45, 48, 54, 39, 0], [30, 34, 52, 38, 46, 0, 0, 0], [18, 34, 47, 34, 34, 47, 0, 0], [21, 34, 42, 39, 38, 41, 0, 0], [9, 48, 54, 53, 51, 48, 52, 0], [20, 48, 40, 41, 34, 37, 34, 46], [20, 34, 52, 42, 41, 0, 0, 0], [26, 45, 38, 42, 46, 34, 47, 0], [8, 52, 56, 34, 37, 0, 0, 0], [10, 41, 34, 46, 0, 0, 0, 0], [8, 52, 52, 34, 39, 0, 0, 0], [24, 54, 51, 34, 42, 52, 41, 42], [26, 41, 34, 45, 41, 48, 54, 35], [26, 34, 35, 35, 34, 40, 0, 0], [20, 42, 39, 52, 54, 37, 0, 0], [14, 34, 35, 38, 51, 0, 0, 0], [26, 41, 34, 46, 46, 34, 52, 0], [27, 34, 47, 47, 48, 54, 52, 0], [26, 45, 38, 42, 46, 34, 47, 0], [9, 34, 59, 59, 42, 0, 0, 0], [24, 54, 51, 34, 42, 52, 41, 42], [25, 34, 41, 34, 45, 0, 0, 0], [10, 41, 34, 46, 0, 0, 0, 0], [14, 41, 34, 47, 38, 46, 0, 0], [14, 41, 34, 47, 38, 46, 0, 0], [21, 34, 52, 38, 51, 0, 0, 0], [9, 34, 35, 34, 0, 0, 0, 0], [26, 41, 34, 46, 48, 47, 0, 0], [8, 45, 46, 34, 52, 42, 0, 0], [9, 34, 52, 34, 51, 34, 0, 0], [24, 54, 51, 34, 42, 52, 41, 42], [9, 34, 53, 34, 0, 0, 0, 0], [30, 34, 52, 38, 46, 0, 0, 0], [26, 41, 34, 46, 48, 54, 47, 0], [11, 38, 38, 35, 0, 0, 0, 0], [27, 48, 54, 46, 34, 0, 0, 0], [8, 52, 39, 48, 54, 51, 0, 0], [11, 38, 38, 35, 0, 0, 0, 0], [15, 34, 37, 34, 37, 0, 0, 0], [21, 34, 42, 39, 38, 41, 0, 0], [27, 48, 54, 46, 34, 0, 0, 0], [9, 34, 59, 59, 42, 0, 0, 0], [26, 41, 34, 46, 48, 54, 47, 0], [21, 34, 41, 34, 52, 0, 0, 0], [15, 34, 37, 37, 34, 37, 0, 0], [8, 51, 42, 34, 47, 0, 0, 0], [18, 48, 54, 51, 42, 0, 0, 0], [11, 38, 38, 35, 0, 0, 0, 0], [27, 48, 46, 34, 0, 0, 0, 0], [15, 34, 45, 34, 35, 42, 0, 0], [21, 34, 59, 34, 51, 42, 0, 0], [26, 34, 45, 42, 35, 34, 0, 0], [13, 34, 44, 41, 48, 54, 51, 58], [15, 34, 37, 34, 37, 0, 0, 0], [9, 34, 35, 34, 0, 0, 0, 0], [20, 34, 47, 52, 48, 54, 51, 0], [26, 34, 58, 38, 40, 41, 0, 0], [8, 47, 53, 34, 51, 0, 0, 0], [11, 38, 38, 35, 0, 0, 0, 0], [20, 48, 51, 36, 48, 52, 0, 0], [26, 41, 34, 45, 41, 48, 54, 35], [26, 34, 51, 51, 34, 39, 0, 0], [8, 46, 34, 51, 42, 0, 0, 0], [30, 34, 52, 38, 46, 0, 0, 0], [14, 34, 47, 42, 46, 0, 0, 0], [27, 54, 46, 34, 0, 0, 0, 0], [13, 34, 44, 41, 48, 54, 51, 58], [15, 34, 37, 34, 37, 0, 0, 0], [15, 34, 44, 42, 46, 42, 0, 0], [21, 34, 37, 38, 51, 0, 0, 0], [26, 34, 42, 37, 0, 0, 0, 0], [14, 34, 47, 42, 46, 0, 0, 0], [11, 34, 41, 38, 51, 0, 0, 0], [14, 34, 47, 38, 46, 0, 0, 0], [27, 54, 46, 34, 0, 0, 0, 0], [9, 48, 54, 53, 51, 48, 52, 0], [8, 52, 56, 34, 37, 0, 0, 0], [26, 34, 51, 44, 42, 52, 0, 0], [11, 34, 41, 38, 51, 0, 0, 0], [27, 48, 46, 34, 0, 0, 0, 0], [9, 48, 54, 53, 51, 48, 52, 0], [18, 34, 47, 34, 34, 47, 0, 0], [8, 47, 53, 34, 51, 0, 0, 0], [14, 38, 51, 40, 38, 52, 0, 0], [18, 48, 54, 51, 42, 0, 0, 0], [20, 34, 51, 48, 54, 47, 0, 0], [30, 34, 52, 38, 46, 0, 0, 0], [11, 34, 40, 41, 38, 51, 0, 0], [21, 34, 42, 39, 38, 41, 0, 0], [9, 42, 52, 41, 34, 51, 34, 0], [9, 34, 0, 0, 0, 0, 0, 0], [10, 41, 34, 46, 0, 0, 0, 0], [18, 34, 45, 35, 0, 0, 0, 0], [9, 34, 59, 59, 42, 0, 0, 0], [9, 42, 53, 34, 51, 0, 0, 0], [15, 34, 37, 34, 37, 0, 0, 0], [20, 48, 40, 41, 34, 37, 34, 46], [26, 45, 38, 42, 46, 34, 47, 0], [26, 41, 34, 46, 48, 54, 47, 0], [8, 47, 53, 34, 51, 0, 0, 0], [8, 53, 42, 58, 38, 41, 0, 0], [18, 48, 54, 51, 58, 0, 0, 0], [21, 34, 41, 34, 52, 0, 0, 0], [18, 48, 54, 51, 42, 0, 0, 0], [20, 34, 51, 48, 54, 47, 0, 0], [21, 34, 52, 52, 34, 51, 0, 0], [26, 34, 58, 38, 40, 41, 0, 0], [15, 34, 42, 44, 0, 0, 0, 0], [14, 41, 34, 47, 38, 46, 0, 0], [26, 34, 58, 38, 40, 41, 0, 0], [26, 34, 45, 42, 35, 0, 0, 0], [10, 41, 34, 46, 0, 0, 0, 0], [9, 34, 53, 34, 0, 0, 0, 0], [27, 48, 54, 46, 34, 0, 0, 0], [8, 47, 53, 48, 54, 47, 0, 0], [8, 47, 53, 34, 51, 0, 0, 0], [9, 34, 53, 34, 0, 0, 0, 0], [9, 48, 53, 51, 48, 52, 0, 0]]


labels_x = [1,1, 13, 5, 6, 7, 14, 10, 14, 8, 11, 8, 11, 7, 3, 9, 14, 11, 11, 4, 9, 2, 4, 9, 12, 3, 14, 7, 13, 14, 1, 6, 13, 14, 7, 9, 0, 12, 4, 8, 12, 6, 1, 6, 7, 11, 14, 8, 4, 0, 5, 7, 12, 2, 5, 3, 9, 14, 1, 10, 12, 12, 14, 2, 2, 12, 13, 0, 2, 11, 2, 5, 6, 1, 3, 6, 6, 10, 14, 14, 2, 5, 0, 5, 6, 4, 3, 12, 9, 0, 11, 6, 8, 10, 6, 10, 2, 2, 5, 4, 3, 11, 3, 1, 0, 1, 4, 11, 10, 9, 13, 5, 4, 13, 12, 5, 12, 11, 9, 5, 11, 10, 8, 0, 9, 3, 6, 3, 5, 12, 8, 11, 6, 5, 6, 5, 1, 10, 5, 6, 2, 9, 7, 10, 3, 2, 6, 2, 8, 8, 3, 14, 3, 5, 8, 1, 12, 13, 3, 3, 14, 7, 7, 14, 1, 4, 5, 3, 10, 6, 0, 3, 0, 10, 3, 14, 8, 3, 6, 9, 3, 12, 12, 0, 10, 6, 0, 2, 2, 5, 7, 5, 4, 5, 6, 0, 13, 0, 11, 10]

tf.reset_default_graph()



input_x = tf.placeholder(tf.int32,shape=[None,None])

output_y = tf.placeholder(tf.int32,shape=[None,])


word_embedding = tf.get_variable('embedding',shape=[len(vocab_),250],dtype=tf.float32,initializer=tf.random_uniform_initializer(-0.01,0.01))



embedding_lookup = tf.nn.embedding_lookup(word_embedding,input_x)



sequence_len= tf.count_nonzero(input_x,axis=-1)

with tf.variable_scope('encoder') as scope:
    cell1=rnn.LSTMCell(num_units=150)
    cell2=rnn.LSTMCell(num_units=150)


    model,(fs,fc)=tf.nn.bidirectional_dynamic_rnn(cell1,cell2,inputs=embedding_lookup,sequence_length=sequence_len,dtype=tf.float32)


transpose_w=tf.transpose(model[0],[1,0,2])
transpose_r=tf.transpose(model[1],[1,0,2])

concat_w= tf.concat([transpose_r[-1],transpose_w[-1]],axis=-1)

concat_r = tf.concat([fs.c,fc.c],axis=-1)

weights=tf.get_variable('weights',shape=[2*150,len(labels_x)],dtype=tf.float32,initializer=tf.random_uniform_initializer(-0.01,0.01))

bias = tf.get_variable('bias',shape=[len(labels_x)],dtype=tf.float32,initializer=tf.random_uniform_initializer(-0.01,0.01))


final_result = tf.matmul(concat_w,weights) + bias


#normalization

prob=tf.nn.softmax(final_result)
pred=tf.argmax(prob,axis=-1)

#cross entropy

ce=tf.nn.sparse_softmax_cross_entropy_with_logits(logits=final_result,labels=output_y)
loss=tf.reduce_mean(ce)


#evalute
acc=tf.reduce_mean(tf.cast((tf.equal(tf.cast(pred,tf.int32),output_y)),tf.float32))

#train
train=tf.train.AdamOptimizer().minimize(loss)


with tf.Session() as sess:

    sess.run(tf.global_variables_initializer())

    for i in range(2):
        for j in range(10):
            first,second,third,forth,fifth,_=sess.run([loss,prob,pred,final_result,acc,train],feed_dict={input_x:data_pad,output_y:labels_x})



            print("{} Iteration {} epoch {} loss {} accuracy".format(j,i,first,fifth))


with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    first1, second1, third1= sess.run([prob, pred, model],
                                                     feed_dict={input_x: [[18, 41, 48, 54, 51, 58, 0, 0]]})

    dataew=np.array(first1[0]).tolist()
    print(sorted([(i, j) for i, j in enumerate(dataew)], key=lambda x: x[1], reverse=True))
